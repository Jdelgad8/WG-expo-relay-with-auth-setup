{
  "version": 3,
  "sources": ["../../wundergraph.config.ts", "../../wundergraph.server.ts", "../../wundergraph.operations.ts"],
  "sourcesContent": ["import { configureWunderGraphApplication, cors, EnvironmentVariable, introspect, templates, authProviders } from '@wundergraph/sdk';\nimport server from './wundergraph.server';\nimport operations from './wundergraph.operations';\n\nconst countries = introspect.graphql({\n\tapiNamespace: 'countries',\n\turl: 'https://countries.trevorblades.com/',\n});\nconst spaceX = introspect.graphql({\n\tapiNamespace: 'spacex',\n\turl: 'https://spacex-api.fly.dev/graphql/',\n});\n\n// configureWunderGraph emits the configuration\nconfigureWunderGraphApplication({\n  apis: [countries, spaceX],\n  server,\n  operations,\n  generate: {\n    codeGenerators: [],\n  },\n  authentication: {\n    cookieBased: {\n      providers: [\n        authProviders.google({\n          id: \"google\", // unique id for this provider\n          clientId: new EnvironmentVariable(\"GOOGLE_CLIENT_ID_WEB\"),\n          clientSecret: new EnvironmentVariable(\"GOOGLE_CLIENT_SECRET_WEB\"),\n        }),\n      ],\n    },\n  },\n  cors: {\n    ...cors.allowAll,\n    // allowedOrigins:\n    //   process.env.NODE_ENV === \"production\"\n    //     ? [\n    //         // change this before deploying to production to the actual domain where you're deploying your app\n    //         \"http://localhost:3000\",\n    //       ]\n\t\t// \t\t\t: [\n\t\t// \t\t\t\t\"http://localhost:8081\",\n    //         \"http://[YOUR_IP]:19006\",\n    //         \"http://[YOUR_IP]:8081\",\n    //         \"exp://[YOUR_IP]:8081\",\n    //         new EnvironmentVariable(\"WG_ALLOWED_ORIGIN\"),\n    //       ],\n  },\n  security: {\n    enableGraphQLEndpoint:\n      process.env.NODE_ENV !== \"production\" ||\n      process.env.GITPOD_WORKSPACE_ID !== undefined,\n  },\n});\n", "import { configureWunderGraphServer } from '@wundergraph/sdk/server';\n\nexport default configureWunderGraphServer(() => ({\n  // options: {\n  //   serverUrl: \"https://[YOUR_IP]:9991\",\n  //   listen: {\n  //     host: \"[YOUR_IP]\",\n  //     port: \"[YOUR_IP]\",\n  //   },\n  // },\n  hooks: {\n    queries: {\n      Countries: {\n        preResolve: async ({ operations }) => {},\n      },\n    },\n    mutations: {},\n  },\n}));\n", "import { configureWunderGraphOperations } from '@wundergraph/sdk';\nimport type { OperationsConfiguration } from './generated/wundergraph.operations';\n\nexport default configureWunderGraphOperations<OperationsConfiguration>({\n\toperations: {\n\t\tdefaultConfig: {\n\t\t\tauthentication: {\n\t\t\t\trequired: false,\n\t\t\t},\n\t\t},\n\t\tqueries: (config) => ({\n\t\t\t...config,\n\t\t\tcaching: {\n\t\t\t\tenable: false,\n\t\t\t\tstaleWhileRevalidate: 60,\n\t\t\t\tmaxAge: 60,\n\t\t\t\tpublic: true,\n\t\t\t},\n\t\t\tliveQuery: {\n\t\t\t\tenable: true,\n\t\t\t\tpollingIntervalSeconds: 1,\n\t\t\t},\n\t\t}),\n\t\tmutations: (config) => ({\n\t\t\t...config,\n\t\t}),\n\t\tsubscriptions: (config) => ({\n\t\t\t...config,\n\t\t}),\n\t\tcustom: {},\n\t},\n});\n"],
  "mappings": ";;;AAAA,IAAAA,cAAiH;;;ACAjH,oBAA2C;AAE3C,IAAO,iCAAQ,0CAA2B,OAAO;AAAA,EAQ/C,OAAO;AAAA,IACL,SAAS;AAAA,MACP,WAAW;AAAA,QACT,YAAY,OAAO,EAAE,WAAW,MAAM;AAAA,QAAC;AAAA,MACzC;AAAA,IACF;AAAA,IACA,WAAW,CAAC;AAAA,EACd;AACF,EAAE;;;AClBF,iBAA+C;AAG/C,IAAO,qCAAQ,2CAAwD;AAAA,EACtE,YAAY;AAAA,IACX,eAAe;AAAA,MACd,gBAAgB;AAAA,QACf,UAAU;AAAA,MACX;AAAA,IACD;AAAA,IACA,SAAS,CAAC,YAAY;AAAA,MACrB,GAAG;AAAA,MACH,SAAS;AAAA,QACR,QAAQ;AAAA,QACR,sBAAsB;AAAA,QACtB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACT;AAAA,MACA,WAAW;AAAA,QACV,QAAQ;AAAA,QACR,wBAAwB;AAAA,MACzB;AAAA,IACD;AAAA,IACA,WAAW,CAAC,YAAY;AAAA,MACvB,GAAG;AAAA,IACJ;AAAA,IACA,eAAe,CAAC,YAAY;AAAA,MAC3B,GAAG;AAAA,IACJ;AAAA,IACA,QAAQ,CAAC;AAAA,EACV;AACD,CAAC;;;AF3BD,IAAM,YAAY,uBAAW,QAAQ;AAAA,EACpC,cAAc;AAAA,EACd,KAAK;AACN,CAAC;AACD,IAAM,SAAS,uBAAW,QAAQ;AAAA,EACjC,cAAc;AAAA,EACd,KAAK;AACN,CAAC;AAAA,IAGD,6CAAgC;AAAA,EAC9B,MAAM,CAAC,WAAW,MAAM;AAAA,EACxB;AAAA,EACA;AAAA,EACA,UAAU;AAAA,IACR,gBAAgB,CAAC;AAAA,EACnB;AAAA,EACA,gBAAgB;AAAA,IACd,aAAa;AAAA,MACX,WAAW;AAAA,QACT,0BAAc,OAAO;AAAA,UACnB,IAAI;AAAA,UACJ,UAAU,IAAI,gCAAoB,sBAAsB;AAAA,UACxD,cAAc,IAAI,gCAAoB,0BAA0B;AAAA,QAClE,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAAA,EACA,MAAM;AAAA,IACJ,GAAG,iBAAK;AAAA,EAcV;AAAA,EACA,UAAU;AAAA,IACR,uBACE,QAAQ,IAAI,aAAa,gBACzB,QAAQ,IAAI,wBAAwB;AAAA,EACxC;AACF,CAAC;",
  "names": ["import_sdk"]
}
